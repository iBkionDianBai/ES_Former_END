import defaultTo from '../defaultTo.js';
import toNumber from '../toNumber.js';
import { FUNC_ERROR_TEXT } from './helpers.js';

function baseDebounce(func, wait, immediate, __throttle__) {
    if (__throttle__ === void 0) { __throttle__ = false; }
    if (typeof func !== 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
    }
    var timer, lastCallTime, lastInvokeTime, lastArgs, lastThis, result;
    wait = defaultTo(toNumber(wait), 0);
    function shouldInvoke(time) {
        if (lastCallTime === undefined) {
            return true;
        }
        var timeSinceLastCall = time - lastCallTime;
        var timeSinceLastInvoke = time - lastInvokeTime;
        return (timeSinceLastCall >= wait ||
            timeSinceLastCall < 0 ||
            (__throttle__ && timeSinceLastInvoke >= wait));
    }
    function invokeFunc(time) {
        lastInvokeTime = time;
        result = func.apply(lastThis, lastArgs);
        lastThis = lastArgs = undefined;
        return result;
    }
    function debounced() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        lastThis = this;
        lastArgs = args;
        var time = Date.now();
        var isInvoke = shouldInvoke(time);
        var waitTime = !__throttle__
            ? wait
            : !isInvoke && lastCallTime !== undefined && timer === undefined
                ? wait - (time - lastCallTime)
                : wait;
        lastCallTime = time;
        if (isInvoke) {
            if (immediate && timer === undefined) {
                return invokeFunc(time);
            }
        }
        if (timer !== undefined && !__throttle__) {
            clearTimeout(timer);
            timer = undefined;
        }
        if (timer === undefined) {
            timer = setTimeout(function () {
                timer = undefined;
                invokeFunc(Date.now());
            }, waitTime);
        }
        return result;
    }
    function cancel() {
        if (timer !== undefined) {
            clearTimeout(timer);
            timer = undefined;
        }
        lastCallTime = timer = lastArgs = lastThis = undefined;
    }
    function flush() {
        if (timer !== undefined) {
            clearTimeout(timer);
            timer = undefined;
            if (lastArgs) {
                return invokeFunc(Date.now());
            }
        }
        return result;
    }
    function pending() {
        return timer !== undefined;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    debounced.pending = pending;
    return debounced;
}

export { baseDebounce as default };
